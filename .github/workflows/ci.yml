name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run tests with all features
      run: cargo test --all-features --verbose
    
    - name: Generate test coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        files: ./tarpaulin-report.xml
        fail_ci_if_error: false
        verbose: true
    
    - name: Build release
      run: cargo build --release --verbose
    
    - name: Run benchmarks
      if: matrix.os == 'windows-latest'
      run: cargo bench --no-run

  build-ui:
    name: Build UI
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: wasm32-unknown-unknown
    
    - name: Install Trunk
      run: cargo install trunk --locked
    
    - name: Build WebUI
      working-directory: ./webui
      run: trunk build --release
    
    - name: Upload UI artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ui-build
        path: ui/

  build-desktop:
    name: Build Desktop (Windows)
    runs-on: windows-latest
    needs: [test, build-ui]
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Download UI artifacts
        uses: actions/download-artifact@v3
        with:
          name: ui-build
          path: ui/

      - name: Build Tauri desktop app
        working-directory: ./desktop/src-tauri
        run: |
          cargo build --release -j 1

      - name: Upload desktop artifact
        uses: actions/upload-artifact@v3
        with:
          name: speicherwald-desktop
          path: desktop/src-tauri/target/release/speicherwald-desktop.exe

  package-portable:
    name: Package Portable ZIP (Windows)
    runs-on: windows-latest
    needs: [test, build-ui]
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
          target: wasm32-unknown-unknown

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Build portable ZIP via script
        shell: pwsh
        run: |
          python --version
          python scripts/package_portable.py --include-desktop

      - name: Upload portable artifact
        uses: actions/upload-artifact@v3
        with:
          name: portable-zip
          path: dist/*.zip

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, build-ui, build-desktop, package-portable]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Zip UI artifact
        run: |
          if [ -d "ui-build" ]; then (cd ui-build && zip -r ../ui-build.zip .); fi

      - name: Extract version from Cargo.toml
        id: version
        run: |
          ver=$(sed -n 's/^version\s*=\s*"\(.*\)"/\1/p' Cargo.toml | head -n 1)
          if [ -z "$ver" ]; then ver="${GITHUB_RUN_NUMBER}"; fi
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"* %s (%h)" HEAD~10..HEAD >> CHANGELOG.md || true

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            speicherwald-desktop/speicherwald-desktop.exe
            portable-zip/*.zip
            ui-build.zip
